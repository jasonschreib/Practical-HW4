{"ast":null,"code":"var _jsxFileName = \"/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/ElectionInfoCard.js\";\nimport { Card, ListGroup, Container } from \"react-bootstrap\";\nimport \"chart.js/auto\";\nimport { Chart } from \"react-chartjs-2\";\n/*\n * Props:\n *  - appID (string): id of the election\n *  - currVotes (list of integers): number of votes for each choice\n *  - state (JSON): global state of the election\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ElectionInfoCard(props) {\n  // list of colors to include in the pie chart\n  const colorList = [\"#3181ba\", \"#632656\", \"#4dc8e9\", \"#45134c\", \"#793ea8\", \"#5ce3fe\", \"#4e0d4d\", \"#2379a8\", \"#142d6a\"]; // JSON of data for the pie chart (in the specified format)\n\n  const data = {\n    labels: props.state[\"VoteOptions\"] ? props.state[\"VoteOptions\"].split(\",\") : [],\n    datasets: [{\n      label: \"Vote Count\",\n      data: props.currVotes,\n      backgroundColor: colorList.slice(0, props.currVotes.length),\n      hoverOffset: 4,\n      radius: \"75%\"\n    }]\n  };\n  /**\n   * Estimate the end date of the election.\n   * @param {number} latestRound - latest round as a number.\n   * @param {number} endRound - end round of the election as a number.\n   * @returns {string} - human readable date as a string.\n   */\n\n  const estimateEndDate = (latestRound, endRound) => {\n    const secondsPerRound = 4.5;\n    let roundToSeconds = (endRound - latestRound) * secondsPerRound;\n    let date = new Date(Date.now());\n    date.setSeconds(roundToSeconds);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()} at ${date.getHours()}:${date.getMinutes()}`;\n  };\n  /*\n   * Render the card with a list of election info, as well as a pie chart\n   * with the number of votes for each choice.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-100\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Election Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n        children: [/*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"App ID: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://testnet.algoexplorer.io/application/\" + props.appID,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: props.appID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Creator Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://testnet.algoexplorer.io/address/\" + props.state[\"Creator\"],\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: props.state[\"Creator\"] ? props.state[\"Creator\"] : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Most Recent Round: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), props.latestRound]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Election End Round: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: props.latestRound >= props.state[\"ElectionEnd\"] ? \"text-danger\" : \"\",\n            children: [props.state[\"ElectionEnd\"], \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), props.latestRound < props.state[\"ElectionEnd\"] && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"(estimated \", estimateEndDate(props.latestRound, props.state[\"ElectionEnd\"]), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Vote Options:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), \" \", props.state[\"VoteOptions\"]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \" Number of Voters:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), \" \", props.currVotes && Object.values(props.currVotes).reduce((a, b) => a + b, 0) || \"0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), props.currVotes.reduce((a, b) => a + b, 0) > 0 && /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mt-3 px-5\",\n        children: /*#__PURE__*/_jsxDEV(Chart, {\n          type: \"pie\",\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ElectionInfoCard;\nexport default ElectionInfoCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ElectionInfoCard\");","map":{"version":3,"sources":["/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/ElectionInfoCard.js"],"names":["Card","ListGroup","Container","Chart","ElectionInfoCard","props","colorList","data","labels","state","split","datasets","label","currVotes","backgroundColor","slice","length","hoverOffset","radius","estimateEndDate","latestRound","endRound","secondsPerRound","roundToSeconds","date","Date","now","setSeconds","getMonth","getDate","getFullYear","getHours","getMinutes","appID","Object","values","reduce","a","b"],"mappings":";AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,SAA1B,QAA2C,iBAA3C;AACA,OAAO,eAAP;AACA,SAASC,KAAT,QAAsB,iBAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B;AACA,QAAMC,SAAS,GAAG,CAChB,SADgB,EAEhB,SAFgB,EAGhB,SAHgB,EAIhB,SAJgB,EAKhB,SALgB,EAMhB,SANgB,EAOhB,SAPgB,EAQhB,SARgB,EAShB,SATgB,CAAlB,CAF+B,CAc/B;;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAEH,KAAK,CAACI,KAAN,CAAY,aAAZ,IACJJ,KAAK,CAACI,KAAN,CAAY,aAAZ,EAA2BC,KAA3B,CAAiC,GAAjC,CADI,GAEJ,EAHO;AAIXC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,YADT;AAEEL,MAAAA,IAAI,EAAEF,KAAK,CAACQ,SAFd;AAGEC,MAAAA,eAAe,EAAER,SAAS,CAACS,KAAV,CAAgB,CAAhB,EAAmBV,KAAK,CAACQ,SAAN,CAAgBG,MAAnC,CAHnB;AAIEC,MAAAA,WAAW,EAAE,CAJf;AAKEC,MAAAA,MAAM,EAAE;AALV,KADQ;AAJC,GAAb;AAeA;AACF;AACA;AACA;AACA;AACA;;AACE,QAAMC,eAAe,GAAG,CAACC,WAAD,EAAcC,QAAd,KAA2B;AACjD,UAAMC,eAAe,GAAG,GAAxB;AAEA,QAAIC,cAAc,GAAG,CAACF,QAAQ,GAAGD,WAAZ,IAA2BE,eAAhD;AACA,QAAIE,IAAI,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAAX;AACAF,IAAAA,IAAI,CAACG,UAAL,CAAgBJ,cAAhB;AAEA,WAAQ,GAAEC,IAAI,CAACI,QAAL,KAAkB,CAAE,IAAGJ,IAAI,CAACK,OAAL,EAAe,IAAGL,IAAI,CAACM,WAAL,EAAmB,OAAMN,IAAI,CAACO,QAAL,EAAgB,IAAGP,IAAI,CAACQ,UAAL,EAAkB,EAAjH;AACD,GARD;AAUA;AACF;AACA;AACA;;;AACE,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA,gCACE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,IAAI,EAAE,iDAAiD3B,KAAK,CAAC4B,KAAhE;AAAuE,YAAA,MAAM,EAAC,QAA9E;AAAuF,YAAA,GAAG,EAAC,YAA3F;AAAA,sBAAyG5B,KAAK,CAAC4B;AAA/G;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,IAAI,EAAE,6CAA6C5B,KAAK,CAACI,KAAN,CAAY,SAAZ,CAAtD;AAA8E,YAAA,MAAM,EAAC,QAArF;AAA8F,YAAA,GAAG,EAAC,YAAlG;AAAA,sBAAgHJ,KAAK,CAACI,KAAN,CAAY,SAAZ,IAAyBJ,KAAK,CAACI,KAAN,CAAY,SAAZ,CAAzB,GAAkD;AAAlK;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eASE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGJ,KAAK,CAACe,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAaE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,YAAA,SAAS,EAAEf,KAAK,CAACe,WAAN,IAAqBf,KAAK,CAACI,KAAN,CAAY,aAAZ,CAArB,GAAkD,aAAlD,GAAkE,EAAnF;AAAA,uBAAwFJ,KAAK,CAACI,KAAN,CAAY,aAAZ,CAAxF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGGJ,KAAK,CAACe,WAAN,GAAoBf,KAAK,CAACI,KAAN,CAAY,aAAZ,CAApB,iBACC;AAAA,sCAAkBU,eAAe,CAACd,KAAK,CAACe,WAAP,EAAoBf,KAAK,CAACI,KAAN,CAAY,aAAZ,CAApB,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF,eAoBE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,OACwBJ,KAAK,CAACI,KAAN,CAAY,aAAZ,CADxB;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF,eAuBE,QAAC,SAAD,CAAW,IAAX;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAC4B,GAD5B,EAEIJ,KAAK,CAACQ,SAAN,IACAqB,MAAM,CAACC,MAAP,CAAc9B,KAAK,CAACQ,SAApB,EAA+BuB,MAA/B,CAAsC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAApD,EAAuD,CAAvD,CADD,IAEC,GAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAgCGjC,KAAK,CAACQ,SAAN,CAAgBuB,MAAhB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAArC,EAAwC,CAAxC,IAA6C,CAA7C,iBACC,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,WAArB;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,KAAZ;AAAkB,UAAA,IAAI,EAAE/B;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD;;KA5FQH,gB;AA8FT,eAAeA,gBAAf","sourcesContent":["import { Card, ListGroup, Container } from \"react-bootstrap\";\nimport \"chart.js/auto\";\nimport { Chart } from \"react-chartjs-2\";\n\n/*\n * Props:\n *  - appID (string): id of the election\n *  - currVotes (list of integers): number of votes for each choice\n *  - state (JSON): global state of the election\n */\nfunction ElectionInfoCard(props) {\n  // list of colors to include in the pie chart\n  const colorList = [\n    \"#3181ba\",\n    \"#632656\",\n    \"#4dc8e9\",\n    \"#45134c\",\n    \"#793ea8\",\n    \"#5ce3fe\",\n    \"#4e0d4d\",\n    \"#2379a8\",\n    \"#142d6a\",\n  ];\n\n  // JSON of data for the pie chart (in the specified format)\n  const data = {\n    labels: props.state[\"VoteOptions\"]\n      ? props.state[\"VoteOptions\"].split(\",\")\n      : [],\n    datasets: [\n      {\n        label: \"Vote Count\",\n        data: props.currVotes,\n        backgroundColor: colorList.slice(0, props.currVotes.length),\n        hoverOffset: 4,\n        radius: \"75%\",\n      },\n    ],\n  };\n\n  /**\n   * Estimate the end date of the election.\n   * @param {number} latestRound - latest round as a number.\n   * @param {number} endRound - end round of the election as a number.\n   * @returns {string} - human readable date as a string.\n   */\n  const estimateEndDate = (latestRound, endRound) => {\n    const secondsPerRound = 4.5;\n\n    let roundToSeconds = (endRound - latestRound) * secondsPerRound;\n    let date = new Date(Date.now());\n    date.setSeconds(roundToSeconds);\n\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()} at ${date.getHours()}:${date.getMinutes()}`;\n  }\n\n  /*\n   * Render the card with a list of election info, as well as a pie chart\n   * with the number of votes for each choice.\n   */\n  return (\n    <Card className=\"h-100\">\n      <Card.Body>\n        <Card.Title>Election Info</Card.Title>\n        <ListGroup>\n          <ListGroup.Item>\n            <b>App ID: </b>\n            <a href={\"https://testnet.algoexplorer.io/application/\" + props.appID} target=\"_blank\" rel=\"noreferrer\">{props.appID}</a>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>Creator Address: </b>\n            <a href={\"https://testnet.algoexplorer.io/address/\" + props.state[\"Creator\"]} target=\"_blank\" rel=\"noreferrer\">{props.state[\"Creator\"] ? props.state[\"Creator\"] : \"\"}</a>\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>Most Recent Round: </b>\n            {props.latestRound}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>Election End Round: </b>\n            <span className={props.latestRound >= props.state[\"ElectionEnd\"] ? \"text-danger\" : \"\"}>{props.state[\"ElectionEnd\"]} </span> \n            {props.latestRound < props.state[\"ElectionEnd\"] && \n              <span>(estimated {estimateEndDate(props.latestRound, props.state[\"ElectionEnd\"])})</span>\n            }\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b>Vote Options:</b> {props.state[\"VoteOptions\"]}\n          </ListGroup.Item>\n          <ListGroup.Item>\n            <b> Number of Voters:</b>{\" \"}\n            {(props.currVotes &&\n              Object.values(props.currVotes).reduce((a, b) => a + b, 0)) ||\n              \"0\"}\n          </ListGroup.Item>\n        </ListGroup>\n        {props.currVotes.reduce((a, b) => a + b, 0) > 0 && (\n          <Container className=\"mt-3 px-5\">\n            <Chart type=\"pie\" data={data} />\n          </Container>\n        )}\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ElectionInfoCard;\n"]},"metadata":{},"sourceType":"module"}