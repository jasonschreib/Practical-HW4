{"ast":null,"code":"var _jsxFileName = \"/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/ParticipantsCard.js\";\nimport React from \"react\";\nimport { Card, Button, Accordion, Tabs, Tab, ButtonGroup } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\n/*\n * Props:\n *  - appID (string): id of the election\n *  - users (list of strings): user addresses that are connected to AlgoSigner\n *  - user (string): user that is the current selection in the dropdown\n *  - isCreator (boolean): true if the current user is the creator of the election\n *  - optedAccounts (JSON of lists of strings) - lists of users that are accepted, rejected and pending\n *  - electionChoices (string) - comma-separated string of the election choices\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ParticipantsCard(props) {\n  /* handleAccept\n   * Description:\n   *   Makes call to approve a user when 'Accept' button is pressed\n   * Parameters:\n   *  user (string) - user to accept into the election\n   */\n  const handleAccept = user => {\n    mainAlgoHandler.updateUserStatus(props.user, user, \"yes\", parseInt(props.appID));\n  };\n  /* handleReject\n   * Description:\n   *  Makes call to approve a user when 'Reject' button is pressed\n   * Parameters:\n   *  user (string) - user to reject from the election\n   */\n\n\n  const handleReject = user => {\n    mainAlgoHandler.updateUserStatus(props.user, user, \"no\", parseInt(props.appID));\n  };\n  /*\n   * Render a card containing three tabs - \"Accepted\", \"Rejected\", and \"Pending\". All tabs\n   * contain a list of Accordions that allow the user to click and view more information about\n   * any user that has opted-in to the election. If the user is the creator, they can accept/reject\n   * users in the \"Pending\" tab.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"h-100\",\n    style: {\n      overflowY: \"scroll\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Opted In Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n        defaultActiveKey: \"Accepted\",\n        id: \"uncontrolled-tab-example\",\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"Accepted\",\n          title: `Accepted (${props.optedAccounts[\"yes\"].length})`,\n          children: /*#__PURE__*/_jsxDEV(Accordion, {\n            children: props.optedAccounts[\"yes\"] && props.optedAccounts[\"yes\"].map(user => /*#__PURE__*/_jsxDEV(Accordion.Item, {\n              eventKey: user,\n              children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n                children: user.substring(0, 20) + \"...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"User Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 23\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"https://testnet.algoexplorer.io/address/\" + user,\n                  target: \"_blank\",\n                  rel: \"noreferrer\",\n                  children: user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 44\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 23\n                }, this), props.electionChoices[props.userVotes[user]] && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                    children: \"Vote:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 27\n                  }, this), \" \", props.electionChoices[props.userVotes[user]], \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 21\n              }, this)]\n            }, `yes-${user}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"Rejected\",\n          title: `Rejected (${props.optedAccounts[\"no\"].length})`,\n          children: /*#__PURE__*/_jsxDEV(Accordion, {\n            children: props.optedAccounts[\"no\"] && props.optedAccounts[\"no\"].map(user => /*#__PURE__*/_jsxDEV(Accordion.Item, {\n              eventKey: user,\n              children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n                children: user.substring(0, 20) + \"...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"User Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 23\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"https://testnet.algoexplorer.io/address/\" + user,\n                  target: \"_blank\",\n                  rel: \"noreferrer\",\n                  children: user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 44\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this)]\n            }, `no-${user}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          eventKey: \"Opted-In\",\n          title: `Pending (${props.optedAccounts[\"maybe\"].length})`,\n          children: /*#__PURE__*/_jsxDEV(Accordion, {\n            children: props.optedAccounts[\"maybe\"] && props.optedAccounts[\"maybe\"].map(user => /*#__PURE__*/_jsxDEV(Accordion.Item, {\n              eventKey: user,\n              children: [/*#__PURE__*/_jsxDEV(Accordion.Header, {\n                children: user.substring(0, 20) + \"...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n                children: [/*#__PURE__*/_jsxDEV(\"b\", {\n                  children: \"User Address:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 23\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                  href: \"https://testnet.algoexplorer.io/address/\" + user,\n                  target: \"_blank\",\n                  rel: \"noreferrer\",\n                  children: user\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 44\n                }, this), props.isCreator && /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n                    className: \"mt-1\",\n                    children: [/*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => handleAccept(user),\n                      variant: \"success\",\n                      children: \"Accept\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 126,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(Button, {\n                      onClick: () => handleReject(user),\n                      variant: \"danger\",\n                      children: \"Reject\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 133,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 125,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 21\n              }, this)]\n            }, `maybe-${user}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ParticipantsCard;\nexport default ParticipantsCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipantsCard\");","map":{"version":3,"sources":["/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/ParticipantsCard.js"],"names":["React","Card","Button","Accordion","Tabs","Tab","ButtonGroup","mainAlgoHandler","ParticipantsCard","props","handleAccept","user","updateUserStatus","parseInt","appID","handleReject","overflowY","optedAccounts","length","map","substring","electionChoices","userVotes","isCreator"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,IADF,EAEEC,MAFF,EAGEC,SAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,WANF,QAOO,iBAPP;AAQA,OAAOC,eAAP,MAA4B,sBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B;AACF;AACA;AACA;AACA;AACA;AACE,QAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7BJ,IAAAA,eAAe,CAACK,gBAAhB,CACEH,KAAK,CAACE,IADR,EAEEA,IAFF,EAGE,KAHF,EAIEE,QAAQ,CAACJ,KAAK,CAACK,KAAP,CAJV;AAMD,GAPD;AASA;AACF;AACA;AACA;AACA;AACA;;;AACE,QAAMC,YAAY,GAAIJ,IAAD,IAAU;AAC7BJ,IAAAA,eAAe,CAACK,gBAAhB,CACEH,KAAK,CAACE,IADR,EAEEA,IAFF,EAGE,IAHF,EAIEE,QAAQ,CAACJ,KAAK,CAACK,KAAP,CAJV;AAMD,GAPD;AASA;AACF;AACA;AACA;AACA;AACA;;;AACE,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,OAAhB;AAAwB,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAS,EAAE;AAAb,KAA/B;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD;AACE,QAAA,gBAAgB,EAAC,UADnB;AAEE,QAAA,EAAE,EAAC,0BAFL;AAGE,QAAA,SAAS,EAAC,MAHZ;AAAA,gCAKE,QAAC,GAAD;AACE,UAAA,QAAQ,EAAC,UADX;AAEE,UAAA,KAAK,EAAG,aAAYP,KAAK,CAACQ,aAAN,CAAoB,KAApB,EAA2BC,MAAO,GAFxD;AAAA,iCAIE,QAAC,SAAD;AAAA,sBACGT,KAAK,CAACQ,aAAN,CAAoB,KAApB,KACCR,KAAK,CAACQ,aAAN,CAAoB,KAApB,EAA2BE,GAA3B,CAAgCR,IAAD,iBAC7B,QAAC,SAAD,CAAW,IAAX;AAAgB,cAAA,QAAQ,EAAEA,IAA1B;AAAA,sCACE,QAAC,SAAD,CAAW,MAAX;AAAA,0BACGA,IAAI,CAACS,SAAL,CAAe,CAAf,EAAkB,EAAlB,IAAwB;AAD3B;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,SAAD,CAAW,IAAX;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,oBACuB;AAAG,kBAAA,IAAI,EAAE,6CAA6CT,IAAtD;AAA4D,kBAAA,MAAM,EAAC,QAAnE;AAA4E,kBAAA,GAAG,EAAC,YAAhF;AAAA,4BAA8FA;AAA9F;AAAA;AAAA;AAAA;AAAA,wBADvB,eAEE;AAAA;AAAA;AAAA;AAAA,wBAFF,EAGGF,KAAK,CAACY,eAAN,CAAsBZ,KAAK,CAACa,SAAN,CAAgBX,IAAhB,CAAtB,kBACC;AAAA,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EACe,GADf,EAEGF,KAAK,CAACY,eAAN,CAAsBZ,KAAK,CAACa,SAAN,CAAgBX,IAAhB,CAAtB,CAFH,EAEiD,GAFjD;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA,eAAsC,OAAMA,IAAK,EAAjD;AAAA;AAAA;AAAA;AAAA,oBADF;AAFJ;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,gBALF,eA8BE,QAAC,GAAD;AACE,UAAA,QAAQ,EAAC,UADX;AAEE,UAAA,KAAK,EAAG,aAAYF,KAAK,CAACQ,aAAN,CAAoB,IAApB,EAA0BC,MAAO,GAFvD;AAAA,iCAIE,QAAC,SAAD;AAAA,sBACGT,KAAK,CAACQ,aAAN,CAAoB,IAApB,KACCR,KAAK,CAACQ,aAAN,CAAoB,IAApB,EAA0BE,GAA1B,CAA+BR,IAAD,iBAC5B,QAAC,SAAD,CAAW,IAAX;AAAgB,cAAA,QAAQ,EAAEA,IAA1B;AAAA,sCACE,QAAC,SAAD,CAAW,MAAX;AAAA,0BACGA,IAAI,CAACS,SAAL,CAAe,CAAf,EAAkB,EAAlB,IAAwB;AAD3B;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,SAAD,CAAW,IAAX;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,oBACuB;AAAG,kBAAA,IAAI,EAAE,6CAA6CT,IAAtD;AAA4D,kBAAA,MAAM,EAAC,QAAnE;AAA4E,kBAAA,GAAG,EAAC,YAAhF;AAAA,4BAA8FA;AAA9F;AAAA;AAAA;AAAA;AAAA,wBADvB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA,eAAsC,MAAKA,IAAK,EAAhD;AAAA;AAAA;AAAA;AAAA,oBADF;AAFJ;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,gBA9BF,eAgDE,QAAC,GAAD;AACE,UAAA,QAAQ,EAAC,UADX;AAEE,UAAA,KAAK,EAAG,YAAWF,KAAK,CAACQ,aAAN,CAAoB,OAApB,EAA6BC,MAAO,GAFzD;AAAA,iCAIE,QAAC,SAAD;AAAA,sBACGT,KAAK,CAACQ,aAAN,CAAoB,OAApB,KACCR,KAAK,CAACQ,aAAN,CAAoB,OAApB,EAA6BE,GAA7B,CAAkCR,IAAD,iBAC/B,QAAC,SAAD,CAAW,IAAX;AAAgB,cAAA,QAAQ,EAAEA,IAA1B;AAAA,sCACE,QAAC,SAAD,CAAW,MAAX;AAAA,0BACGA,IAAI,CAACS,SAAL,CAAe,CAAf,EAAkB,EAAlB,IAAwB;AAD3B;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,SAAD,CAAW,IAAX;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,oBACuB;AAAG,kBAAA,IAAI,EAAE,6CAA6CT,IAAtD;AAA4D,kBAAA,MAAM,EAAC,QAAnE;AAA4E,kBAAA,GAAG,EAAC,YAAhF;AAAA,4BAA8FA;AAA9F;AAAA;AAAA;AAAA;AAAA,wBADvB,EAEGF,KAAK,CAACc,SAAN,iBACC;AAAA,yCACE,QAAC,WAAD;AAAa,oBAAA,SAAS,EAAC,MAAvB;AAAA,4CACE,QAAC,MAAD;AACE,sBAAA,OAAO,EAAE,MAAMb,YAAY,CAACC,IAAD,CAD7B;AAEE,sBAAA,OAAO,EAAC,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAQE,QAAC,MAAD;AACE,sBAAA,OAAO,EAAE,MAAMI,YAAY,CAACJ,IAAD,CAD7B;AAEE,sBAAA,OAAO,EAAC,QAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA,eAAsC,SAAQA,IAAK,EAAnD;AAAA;AAAA;AAAA;AAAA,oBADF;AAFJ;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,gBAhDF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6FD;;KAlIQH,gB;AAoIT,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  Button,\n  Accordion,\n  Tabs,\n  Tab,\n  ButtonGroup,\n} from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\n\n/*\n * Props:\n *  - appID (string): id of the election\n *  - users (list of strings): user addresses that are connected to AlgoSigner\n *  - user (string): user that is the current selection in the dropdown\n *  - isCreator (boolean): true if the current user is the creator of the election\n *  - optedAccounts (JSON of lists of strings) - lists of users that are accepted, rejected and pending\n *  - electionChoices (string) - comma-separated string of the election choices\n */\nfunction ParticipantsCard(props) {\n  /* handleAccept\n   * Description:\n   *   Makes call to approve a user when 'Accept' button is pressed\n   * Parameters:\n   *  user (string) - user to accept into the election\n   */\n  const handleAccept = (user) => {\n    mainAlgoHandler.updateUserStatus(\n      props.user,\n      user,\n      \"yes\",\n      parseInt(props.appID)\n    );\n  };\n\n  /* handleReject\n   * Description:\n   *  Makes call to approve a user when 'Reject' button is pressed\n   * Parameters:\n   *  user (string) - user to reject from the election\n   */\n  const handleReject = (user) => {\n    mainAlgoHandler.updateUserStatus(\n      props.user,\n      user,\n      \"no\",\n      parseInt(props.appID)\n    );\n  };\n\n  /*\n   * Render a card containing three tabs - \"Accepted\", \"Rejected\", and \"Pending\". All tabs\n   * contain a list of Accordions that allow the user to click and view more information about\n   * any user that has opted-in to the election. If the user is the creator, they can accept/reject\n   * users in the \"Pending\" tab.\n   */\n  return (\n    <Card className=\"h-100\" style={{ overflowY: \"scroll\" }}>\n      <Card.Body>\n        <Card.Title>Opted In Users</Card.Title>\n        <Tabs\n          defaultActiveKey=\"Accepted\"\n          id=\"uncontrolled-tab-example\"\n          className=\"mb-3\"\n        >\n          <Tab\n            eventKey=\"Accepted\"\n            title={`Accepted (${props.optedAccounts[\"yes\"].length})`}\n          >\n            <Accordion>\n              {props.optedAccounts[\"yes\"] &&\n                props.optedAccounts[\"yes\"].map((user) => (\n                  <Accordion.Item eventKey={user} key={`yes-${user}`}>\n                    <Accordion.Header>\n                      {user.substring(0, 20) + \"...\"}\n                    </Accordion.Header>\n                    <Accordion.Body>\n                      <b>User Address:</b> <a href={\"https://testnet.algoexplorer.io/address/\" + user} target=\"_blank\" rel=\"noreferrer\">{user}</a>\n                      <br />\n                      {props.electionChoices[props.userVotes[user]] && (\n                        <div>\n                          <b>Vote:</b>{\" \"}\n                          {props.electionChoices[props.userVotes[user]]}{\" \"}\n                        </div>\n                      )}\n                    </Accordion.Body>\n                  </Accordion.Item>\n                ))}\n            </Accordion>\n          </Tab>\n          <Tab\n            eventKey=\"Rejected\"\n            title={`Rejected (${props.optedAccounts[\"no\"].length})`}\n          >\n            <Accordion>\n              {props.optedAccounts[\"no\"] &&\n                props.optedAccounts[\"no\"].map((user) => (\n                  <Accordion.Item eventKey={user} key={`no-${user}`}>\n                    <Accordion.Header>\n                      {user.substring(0, 20) + \"...\"}\n                    </Accordion.Header>\n                    <Accordion.Body>\n                      <b>User Address:</b> <a href={\"https://testnet.algoexplorer.io/address/\" + user} target=\"_blank\" rel=\"noreferrer\">{user}</a>\n                    </Accordion.Body>\n                  </Accordion.Item>\n                ))}\n            </Accordion>\n          </Tab>\n          <Tab\n            eventKey=\"Opted-In\"\n            title={`Pending (${props.optedAccounts[\"maybe\"].length})`}\n          >\n            <Accordion>\n              {props.optedAccounts[\"maybe\"] &&\n                props.optedAccounts[\"maybe\"].map((user) => (\n                  <Accordion.Item eventKey={user} key={`maybe-${user}`}>\n                    <Accordion.Header>\n                      {user.substring(0, 20) + \"...\"}\n                    </Accordion.Header>\n                    <Accordion.Body>\n                      <b>User Address:</b> <a href={\"https://testnet.algoexplorer.io/address/\" + user} target=\"_blank\" rel=\"noreferrer\">{user}</a>\n                      {props.isCreator && (\n                        <div>\n                          <ButtonGroup className=\"mt-1\">\n                            <Button\n                              onClick={() => handleAccept(user)}\n                              variant=\"success\"\n                            >\n                              Accept\n                            </Button>\n\n                            <Button\n                              onClick={() => handleReject(user)}\n                              variant=\"danger\"\n                            >\n                              Reject\n                            </Button>\n                          </ButtonGroup>\n                        </div>\n                      )}\n                    </Accordion.Body>\n                  </Accordion.Item>\n                ))}\n            </Accordion>\n          </Tab>\n        </Tabs>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ParticipantsCard;\n"]},"metadata":{},"sourceType":"module"}