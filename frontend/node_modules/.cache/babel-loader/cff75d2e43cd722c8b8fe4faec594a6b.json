{"ast":null,"code":"var _jsxFileName = \"/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/pages/ElectionPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Row, Col, Container, Modal, Button } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\nimport NavBar from \"../components/NavBar\";\nimport VoterCard from \"../components/VoterCard\";\nimport ParticipantsCard from \"../components/ParticipantsCard\";\nimport ElectionInfoCard from \"../components/ElectionInfoCard\";\nimport { useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ElectionPage() {\n  _s();\n\n  var _location$state, _location$state2;\n\n  /*\n   * Location lets us access the state (appID and accounts) passed to the component from the ConnectPage.\n   */\n  let location = useLocation();\n  const appID = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.appID) || \"\"; // appID that the user entered\n\n  const accounts = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.accts) || []; // accounts that are connected to AlgoSigner\n\n  /*\n   * Here we define the stored state for this component.\n   */\n\n  const [isError, setIsError] = useState(false); // boolean set to true if there is an error retrieving the electionState\n\n  const [latestRound, setLatestRound] = useState(0); // number value for the most recent Algorand TestNet round\n\n  const [electionState, setElectionState] = useState({}); // JSON containing all global variables for the application\n\n  const [mainAccount, setMainAccount] = useState(accounts.length > 0 ? accounts[0] : \"\"); // string that is set to the current account\n\n  const [totalVotes, setTotalVotes] = useState([]); // array of integers storing the total number of votes for each choice\n\n  const [electionChoices, setElectionChoices] = useState([]); // array of strings listing the choices in the election\n\n  const [userVotes, setUserVotes] = useState({}); // JSON containing a mapping of user addresses to their votes in the election\n\n  const [optedAccounts, setOptedAccounts] = useState({\n    maybe: [],\n    yes: [],\n    no: []\n  }); // JSON of lists containing the user addresses who have are accepted, rejected, and pending\n\n  /* refreshState\n   * Description:\n   * Calls API to get election state and list of all users that have opted-in.\n   */\n\n  const refreshState = useCallback(() => {\n    if (!appID) {\n      setIsError(true);\n      return;\n    }\n\n    console.log(\"refreshing state...\");\n    mainAlgoHandler.getLatestRound().then(res => {\n      console.log(`Latest Round: ${res}`);\n      setLatestRound(res);\n    }).then(() => {\n      mainAlgoHandler.getElectionState(appID).then(res => {\n        console.log(res);\n        let newTotalVotes = [];\n\n        for (let i = 0; i < res[\"NumVoteOptions\"]; i++) {\n          newTotalVotes.push(res[`VotesFor${i}`]);\n        }\n\n        let newElectionChoices = res[\"VoteOptions\"].split(\",\");\n        setElectionState(res);\n        setTotalVotes(newTotalVotes);\n        setElectionChoices(newElectionChoices);\n      }).then(() => {\n        mainAlgoHandler.getAllLocalStates(parseInt(appID)).then(allLocalStates => {\n          let newOptedAccounts = {\n            yes: [],\n            no: [],\n            maybe: []\n          };\n\n          for (const address in allLocalStates) {\n            let canVote = allLocalStates[address][\"can_vote\"];\n\n            if (\"can_vote\" in allLocalStates[address]) {\n              newOptedAccounts[canVote].push(address);\n            }\n          }\n\n          setOptedAccounts(newOptedAccounts);\n          let newUserVotes = {};\n\n          for (const address in allLocalStates) {\n            if (\"voted\" in allLocalStates[address]) {\n              newUserVotes[address] = allLocalStates[address][\"voted\"];\n            }\n          }\n\n          setUserVotes(newUserVotes);\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n      setIsError(true);\n    });\n  }, [appID]);\n  /* useEffect\n   * Description:\n   *  Retrieves election state when component is first rendered\n   */\n\n  useEffect(() => {\n    refreshState();\n  }, [refreshState]);\n  /* handleMainAccountChange\n   * Description:\n   *  Updates the main account and updates the state\n   * Parameters:\n   *  user (string) - user to change main account to\n   */\n\n  const handleMainAccountChange = user => {\n    setMainAccount(user);\n    refreshState();\n  };\n  /*\n   * Render the main election page. It displays the NavBar at the top of the page,\n   * as well as three Cards - the global election info, the election participants,\n   * and a form to participate in the election. If isError is true, then a Modal\n   * (a popup) is displayed.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      connected: true,\n      handleUserUpdate: handleMainAccountChange,\n      accounts: accounts,\n      mainAccount: mainAccount,\n      refreshState: refreshState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        xs: 1,\n        md: 2,\n        className: \"g-4 mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            children: accounts.length > 0 && /*#__PURE__*/_jsxDEV(VoterCard, {\n              user: mainAccount,\n              appID: appID,\n              electionState: electionState,\n              latestRound: latestRound,\n              isAccepted: optedAccounts[\"yes\"].includes(mainAccount),\n              isPending: optedAccounts[\"maybe\"].includes(mainAccount),\n              isRejected: optedAccounts[\"no\"].includes(mainAccount),\n              isVoted: userVotes[mainAccount],\n              electionChoices: electionChoices\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(ParticipantsCard, {\n              appID: appID,\n              users: accounts,\n              user: mainAccount,\n              userVotes: userVotes,\n              isCreator: electionState[\"Creator\"] === mainAccount,\n              optedAccounts: optedAccounts,\n              electionChoices: electionChoices\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(ElectionInfoCard, {\n            currVotes: totalVotes,\n            appID: appID,\n            state: electionState,\n            latestRound: latestRound\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: isError,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: \"There was an error when retrieving the application state. Please check that you entered the correct application ID.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          href: \"/\",\n          children: \"Return to Connect Page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ElectionPage, \"gfnWlNqWs2qtKsz2xYY2FNQp9ak=\", false, function () {\n  return [useLocation];\n});\n\n_c = ElectionPage;\nexport default ElectionPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ElectionPage\");","map":{"version":3,"sources":["/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/pages/ElectionPage.js"],"names":["React","useCallback","useEffect","useState","Row","Col","Container","Modal","Button","mainAlgoHandler","NavBar","VoterCard","ParticipantsCard","ElectionInfoCard","useLocation","ElectionPage","location","appID","state","accounts","accts","isError","setIsError","latestRound","setLatestRound","electionState","setElectionState","mainAccount","setMainAccount","length","totalVotes","setTotalVotes","electionChoices","setElectionChoices","userVotes","setUserVotes","optedAccounts","setOptedAccounts","maybe","yes","no","refreshState","console","log","getLatestRound","then","res","getElectionState","newTotalVotes","i","push","newElectionChoices","split","getAllLocalStates","parseInt","allLocalStates","newOptedAccounts","address","canVote","newUserVotes","catch","err","handleMainAccountChange","user","includes"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Row, Col, Container, Modal, Button } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\nimport NavBar from \"../components/NavBar\";\nimport VoterCard from \"../components/VoterCard\";\nimport ParticipantsCard from \"../components/ParticipantsCard\";\nimport ElectionInfoCard from \"../components/ElectionInfoCard\";\n\nimport { useLocation } from \"react-router-dom\";\n\nfunction ElectionPage() {\n  /*\n   * Location lets us access the state (appID and accounts) passed to the component from the ConnectPage.\n   */\n  let location = useLocation();\n  const appID = location.state?.appID || \"\"; // appID that the user entered\n  const accounts = location.state?.accts || []; // accounts that are connected to AlgoSigner\n\n  /*\n   * Here we define the stored state for this component.\n   */\n  const [isError, setIsError] = useState(false); // boolean set to true if there is an error retrieving the electionState\n  const [latestRound, setLatestRound] = useState(0); // number value for the most recent Algorand TestNet round\n  const [electionState, setElectionState] = useState({}); // JSON containing all global variables for the application\n  const [mainAccount, setMainAccount] = useState(\n    accounts.length > 0 ? accounts[0] : \"\"\n  ); // string that is set to the current account\n  const [totalVotes, setTotalVotes] = useState([]); // array of integers storing the total number of votes for each choice\n  const [electionChoices, setElectionChoices] = useState([]); // array of strings listing the choices in the election\n  const [userVotes, setUserVotes] = useState({}); // JSON containing a mapping of user addresses to their votes in the election\n  const [optedAccounts, setOptedAccounts] = useState({\n    maybe: [],\n    yes: [],\n    no: [],\n  }); // JSON of lists containing the user addresses who have are accepted, rejected, and pending\n\n  /* refreshState\n   * Description:\n   * Calls API to get election state and list of all users that have opted-in.\n   */\n  const refreshState = useCallback(() => {\n    if (!appID) {\n      setIsError(true);\n      return;\n    }\n    console.log(\"refreshing state...\");\n\n    mainAlgoHandler\n      .getLatestRound()\n      .then((res) => {\n        console.log(`Latest Round: ${res}`);\n\n        setLatestRound(res);\n      })\n      .then(() => {\n        mainAlgoHandler\n          .getElectionState(appID)\n          .then((res) => {\n            console.log(res);\n\n            let newTotalVotes = [];\n            for (let i = 0; i < res[\"NumVoteOptions\"]; i++) {\n              newTotalVotes.push(res[`VotesFor${i}`]);\n            }\n\n            let newElectionChoices = res[\"VoteOptions\"].split(\",\");\n            setElectionState(res);\n            setTotalVotes(newTotalVotes);\n            setElectionChoices(newElectionChoices);\n          })\n          .then(() => {\n            mainAlgoHandler\n            .getAllLocalStates(parseInt(appID))\n            .then((allLocalStates) => {\n              let newOptedAccounts = {\n                yes: [],\n                no: [],\n                maybe: [],\n              };\n              for (const address in allLocalStates) {\n                let canVote = allLocalStates[address][\"can_vote\"];\n                if (\"can_vote\" in allLocalStates[address]) {\n                  newOptedAccounts[canVote].push(address);\n                }\n              }\n              setOptedAccounts(newOptedAccounts);\n\n              let newUserVotes = {};\n              for (const address in allLocalStates) {\n                if (\"voted\" in allLocalStates[address]) {\n                  newUserVotes[address] = allLocalStates[address][\"voted\"];\n                }\n              }\n              setUserVotes(newUserVotes);\n            })\n          })\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsError(true);\n      });\n  }, [appID]);\n\n  /* useEffect\n   * Description:\n   *  Retrieves election state when component is first rendered\n   */\n  useEffect(() => {\n    refreshState();\n  }, [refreshState]);\n\n  /* handleMainAccountChange\n   * Description:\n   *  Updates the main account and updates the state\n   * Parameters:\n   *  user (string) - user to change main account to\n   */\n  const handleMainAccountChange = (user) => {\n    setMainAccount(user);\n    refreshState();\n  };\n\n  /*\n   * Render the main election page. It displays the NavBar at the top of the page,\n   * as well as three Cards - the global election info, the election participants,\n   * and a form to participate in the election. If isError is true, then a Modal\n   * (a popup) is displayed.\n   */\n  return (\n    <>\n      <NavBar\n        connected\n        handleUserUpdate={handleMainAccountChange}\n        accounts={accounts}\n        mainAccount={mainAccount}\n        refreshState={refreshState}\n      />\n      <Container>\n        <Row xs={1} md={2} className=\"g-4 mt-3\">\n          <Col>\n            <Row>\n              {accounts.length > 0 && (\n                <VoterCard\n                  user={mainAccount}\n                  appID={appID}\n                  electionState={electionState}\n                  latestRound={latestRound}\n                  isAccepted={optedAccounts[\"yes\"].includes(mainAccount)}\n                  isPending={optedAccounts[\"maybe\"].includes(mainAccount)}\n                  isRejected={optedAccounts[\"no\"].includes(mainAccount)}\n                  isVoted={userVotes[mainAccount]}\n                  electionChoices={electionChoices}\n                />\n              )}\n            </Row>\n            <Row>\n              <ParticipantsCard\n                appID={appID}\n                users={accounts}\n                user={mainAccount}\n                userVotes={userVotes}\n                isCreator={electionState[\"Creator\"] === mainAccount}\n                optedAccounts={optedAccounts}\n                electionChoices={electionChoices}\n              />\n            </Row>\n          </Col>\n\n          <Col>\n            <ElectionInfoCard\n              currVotes={totalVotes}\n              appID={appID}\n              state={electionState}\n              latestRound={latestRound}\n            />\n          </Col>\n        </Row>\n      </Container>\n      <Modal show={isError}>\n        <Modal.Header>\n          <Modal.Title>Error</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          There was an error when retrieving the application state. Please check\n          that you entered the correct application ID.\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"info\" href=\"/\">\n            Return to Connect Page\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default ElectionPage;\n"]},"metadata":{},"sourceType":"module"}