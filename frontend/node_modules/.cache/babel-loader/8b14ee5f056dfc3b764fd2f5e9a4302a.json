{"ast":null,"code":"var _jsxFileName = \"/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/pages/ConnectPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Row, Col, Card, Container, Button, Form } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\nimport NavBar from \"../components/NavBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ConnectPage() {\n  _s();\n\n  /*\n   * Navigate lets us pass stateto the ElectionPage component.\n   */\n  let navigate = useNavigate();\n  /*\n   * Here we define the stored state for this component.\n   */\n\n  const [accounts, setAccounts] = useState([]); // list of user addresses connected to AlgoSigner\n\n  const [isConnected, setIsConnected] = useState(false); // boolean that is true if the page is connected to AlgoSigner\n\n  /* connectAlgoSigner\n   * Description:\n   * retrieves the user accounts from AlgoSigner\n   */\n\n  const connectAlgoSigner = async () => {\n    let newAccounts = await mainAlgoHandler.getAlgoSignerAccounts();\n    setAccounts(newAccounts);\n    setIsConnected(true);\n  };\n  /* handleElectionSubmit\n   * Description:\n   *  takes the value inputted into the appID form and naviagates to ElectionPage,\n   *  sending along the relevant state (accounts and appID)\n   * */\n\n\n  const handleElectionSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const formDataObj = Object.fromEntries(formData.entries());\n    console.log(formDataObj);\n    navigate(\"/election\", {\n      state: {\n        accts: accounts,\n        appID: formDataObj[\"appID\"]\n      }\n    });\n  };\n  /*\n   * Render the connect page. It displays the NavBar at the top of the page,\n   * as well as a button to connect to AlgoSigner and a form to fill in the app ID.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"px-3 mt-3\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"mt-5\",\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: \"Connect to AlgoSigner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"info\",\n                onClick: connectAlgoSigner,\n                children: \"Connect\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"px-3 mt-3\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: \"App ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form, {\n                onSubmit: async e => await handleElectionSubmit(e),\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  className: \"mb-3\",\n                  controlId: \"appID\",\n                  children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                    disabled: !isConnected,\n                    type: \"election\",\n                    name: \"appID\",\n                    placeholder: \"Enter app id\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"info\",\n                  type: \"submit\",\n                  children: \"Submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ConnectPage, \"8CPqHLjCMntuVWkGWmrbPAMShNA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ConnectPage;\nexport default ConnectPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectPage\");","map":{"version":3,"sources":["/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/pages/ConnectPage.js"],"names":["React","useState","Row","Col","Card","Container","Button","Form","mainAlgoHandler","NavBar","useNavigate","ConnectPage","navigate","accounts","setAccounts","isConnected","setIsConnected","connectAlgoSigner","newAccounts","getAlgoSignerAccounts","handleElectionSubmit","e","preventDefault","formData","FormData","target","formDataObj","Object","fromEntries","entries","console","log","state","accts","appID"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Card, Container, Button, Form } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\nimport NavBar from \"../components/NavBar\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction ConnectPage() {\n  /*\n   * Navigate lets us pass stateto the ElectionPage component.\n   */\n  let navigate = useNavigate();\n\n  /*\n   * Here we define the stored state for this component.\n   */\n  const [accounts, setAccounts] = useState([]); // list of user addresses connected to AlgoSigner\n  const [isConnected, setIsConnected] = useState(false); // boolean that is true if the page is connected to AlgoSigner\n\n  /* connectAlgoSigner\n   * Description:\n   * retrieves the user accounts from AlgoSigner\n   */\n  const connectAlgoSigner = async () => {\n    let newAccounts = await mainAlgoHandler.getAlgoSignerAccounts();\n    setAccounts(newAccounts);\n    setIsConnected(true);\n  };\n\n  /* handleElectionSubmit\n   * Description:\n   *  takes the value inputted into the appID form and naviagates to ElectionPage,\n   *  sending along the relevant state (accounts and appID)\n   * */\n  const handleElectionSubmit = async (e) => {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const formDataObj = Object.fromEntries(formData.entries());\n    console.log(formDataObj);\n    navigate(\"/election\", {\n      state: { accts: accounts, appID: formDataObj[\"appID\"] },\n    });\n  };\n\n  /*\n   * Render the connect page. It displays the NavBar at the top of the page,\n   * as well as a button to connect to AlgoSigner and a form to fill in the app ID.\n   */\n  return (\n    <>\n      <NavBar />\n      <Container>\n        <Row className=\"px-3 mt-3\">\n          <Col>\n            <Card className=\"mt-5\">\n              <Card.Body>\n                <Card.Title>Connect to AlgoSigner</Card.Title>\n                <Button variant=\"info\" onClick={connectAlgoSigner}>\n                  Connect\n                </Button>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <Row className=\"px-3 mt-3\">\n          <Col>\n            <Card>\n              <Card.Body>\n                <Card.Title>App ID</Card.Title>\n                <Form onSubmit={async (e) => await handleElectionSubmit(e)}>\n                  <Form.Group className=\"mb-3\" controlId=\"appID\">\n                    <Form.Control\n                      disabled={!isConnected}\n                      type=\"election\"\n                      name=\"appID\"\n                      placeholder=\"Enter app id\"\n                    />\n                  </Form.Group>\n                  <Button variant=\"info\" type=\"submit\">\n                    Submit\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default ConnectPage;\n"]},"metadata":{},"sourceType":"module"}