{"ast":null,"code":"var _jsxFileName = \"/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/VoterCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { ButtonGroup, Card, Button, DropdownButton, Dropdown } from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\n/*\n * Props:\n *  - appID (string): id of the election\n *  - user (string): user that is the current selection in the dropdown\n *  - electionState (JSON): global state of the election\n *  - isAccepted (boolean): true if the user has been accepted\n *  - isPending (boolean): true if the user has opted-in but not been accepted/ rejected\n *  - isRejected (boolean): true if the user has been rejected\n *  - is Voted (boolean): true if the user has voted in the election already\n *  - electionChoices (string) - comma-separated string of the election choices\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VoterCard(props) {\n  _s();\n\n  const [voteChoice, setVoteChoice] = useState(\"\"); // holds the vote option chosen on the radio select form\n\n  /* handleVoteSelect\n   * Description:\n   *  Updates the states when the user changes their vote option\n   */\n\n  const handleVoteSelect = choice => {\n    setVoteChoice(choice);\n  };\n  /* handleVoteSubmit\n   * Description:\n   *  Sends the vote to the blockchain.\n   */\n\n\n  const handleVoteSubmit = e => {\n    e.preventDefault();\n    const choices = props.electionChoices;\n    let voteValue = choices.indexOf(voteChoice);\n    if (voteValue > -1) mainAlgoHandler.vote(props.user, voteValue, parseInt(props.appID));\n  };\n  /* handleOptIn\n   * Description:\n   *  Opts the user into the election on the blockchain.\n   * */\n\n\n  const handleOptIn = e => {\n    e.preventDefault();\n    mainAlgoHandler.optInAccount(props.user, parseInt(props.appID));\n  };\n  /* handleClearState\n   * Description:\n   *  Clears the user vote on the blockchain.\n   */\n\n\n  const handleClearState = e => {\n    e.preventDefault();\n    mainAlgoHandler.clearState(props.user, parseInt(props.appID));\n  };\n  /* handleCloseOut\n   *  Description:\n   *   Closes out the user vote on the blockchain.\n   */\n\n\n  const handleCloseOut = e => {\n    e.preventDefault();\n    mainAlgoHandler.closeOut(props.user, parseInt(props.appID));\n  };\n  /*\n   * Render the card which allows the user to participate in the election.\n   * In the beginning, the user can opt-in, and then the card shows a page\n   * which waits for acceptance. If the user is rejected, then they are done.\n   * If they are accepted, they have the option to vote in the election. Once\n   * they vote, they can clear state / close out.\n   */\n\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-4\",\n    children: [!props.isPending && !props.isAccepted && !props.isRejected && /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Opt-In to the Election\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"To participate in the election, you must opt-in. If the creator of the election accepts, you can vote!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"info\",\n        onClick: handleOptIn,\n        children: \"Opt-In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), props.isPending && /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"Waiting for Acceptance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"Waiting for the creator of the election to accept...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"mt-3\",\n        children: \"You can close out or clear state to remove this smart contract from your account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseOut,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Close Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClearState,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Clear State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this), props.isAccepted && props.isVoted === undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: \"Cast Your Vote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: \"Use the dropdown below to select your vote!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n            variant: \"info\",\n            title: `Option ${voteChoice}`,\n            id: \"voteOptions\",\n            children: props.electionChoices.map(choice => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n              value: choice,\n              onClick: () => handleVoteSelect(choice),\n              children: choice\n            }, choice, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"info\",\n            onClick: handleVoteSubmit,\n            children: \"Vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"mt-3\",\n          children: \"You can close out or clear state to remove this smart contract from your account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseOut,\n            variant: \"info\",\n            type: \"submit\",\n            children: \"Close Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClearState,\n            variant: \"info\",\n            type: \"submit\",\n            children: \"Clear State\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), props.isVoted !== undefined && /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"You Voted!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: [\"You have cast your vote for option\", \" \", props.electionChoices[props.isVoted], \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"mt-3\",\n        children: [\"You can close out or clear state to remove this smart contract from your account.\", props.latestRound < props.electionState.ElectionEnd ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This will also remove your vote from the election\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Your vote will remain in the election's final results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseOut,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Close Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClearState,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Clear State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), props.isRejected && /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: \"You Have Been Rejected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: \"The creator of this election has rejected your request to be able to vote in this election.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        className: \"mt-3\",\n        children: \"You can close out or clear state to remove this smart contract from your account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseOut,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Close Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClearState,\n          variant: \"info\",\n          type: \"submit\",\n          children: \"Clear State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VoterCard, \"dZPhKDLBgKZ2rXuF6hjMZ4JCqF0=\");\n\n_c = VoterCard;\nexport default VoterCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"VoterCard\");","map":{"version":3,"sources":["/Users/jasonschreiber/Documents/UPenn Documents/Junior Year/Spring/CIS 2330/Practical-HW4/frontend/src/components/VoterCard.js"],"names":["React","useState","ButtonGroup","Card","Button","DropdownButton","Dropdown","mainAlgoHandler","VoterCard","props","voteChoice","setVoteChoice","handleVoteSelect","choice","handleVoteSubmit","e","preventDefault","choices","electionChoices","voteValue","indexOf","vote","user","parseInt","appID","handleOptIn","optInAccount","handleClearState","clearState","handleCloseOut","closeOut","isPending","isAccepted","isRejected","isVoted","undefined","map","latestRound","electionState","ElectionEnd"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  ButtonGroup,\n  Card,\n  Button,\n  DropdownButton,\n  Dropdown,\n} from \"react-bootstrap\";\nimport mainAlgoHandler from \"../utils/AlgoHandler\";\n\n\n/*\n * Props:\n *  - appID (string): id of the election\n *  - user (string): user that is the current selection in the dropdown\n *  - electionState (JSON): global state of the election\n *  - isAccepted (boolean): true if the user has been accepted\n *  - isPending (boolean): true if the user has opted-in but not been accepted/ rejected\n *  - isRejected (boolean): true if the user has been rejected\n *  - is Voted (boolean): true if the user has voted in the election already\n *  - electionChoices (string) - comma-separated string of the election choices\n */\nfunction VoterCard(props) {\n  const [voteChoice, setVoteChoice] = useState(\"\"); // holds the vote option chosen on the radio select form\n\n  /* handleVoteSelect\n   * Description:\n   *  Updates the states when the user changes their vote option\n   */\n  const handleVoteSelect = (choice) => {\n    setVoteChoice(choice);\n  };\n\n  /* handleVoteSubmit\n   * Description:\n   *  Sends the vote to the blockchain.\n   */\n  const handleVoteSubmit = (e) => {\n    e.preventDefault();\n    const choices = props.electionChoices;\n    let voteValue = choices.indexOf(voteChoice);\n    if (voteValue > -1)\n      mainAlgoHandler.vote(props.user, voteValue, parseInt(props.appID));\n  };\n\n  /* handleOptIn\n   * Description:\n   *  Opts the user into the election on the blockchain.\n   * */\n  const handleOptIn = (e) => {\n    e.preventDefault();\n    mainAlgoHandler.optInAccount(props.user, parseInt(props.appID));\n  };\n\n  /* handleClearState\n   * Description:\n   *  Clears the user vote on the blockchain.\n   */\n  const handleClearState = (e) => {\n    e.preventDefault();\n    mainAlgoHandler.clearState(props.user, parseInt(props.appID));\n  };\n\n  /* handleCloseOut\n   *  Description:\n   *   Closes out the user vote on the blockchain.\n   */\n  const handleCloseOut = (e) => {\n    e.preventDefault();\n    mainAlgoHandler.closeOut(props.user, parseInt(props.appID));\n  };\n\n  /*\n   * Render the card which allows the user to participate in the election.\n   * In the beginning, the user can opt-in, and then the card shows a page\n   * which waits for acceptance. If the user is rejected, then they are done.\n   * If they are accepted, they have the option to vote in the election. Once\n   * they vote, they can clear state / close out.\n   */\n  return (\n    <Card className=\"mb-4\">\n      {!props.isPending && !props.isAccepted && !props.isRejected && (\n        <Card.Body>\n          <Card.Title>Opt-In to the Election</Card.Title>\n          <Card.Text>\n            To participate in the election, you must opt-in. If the creator of\n            the election accepts, you can vote!\n          </Card.Text>\n          <Button variant=\"info\" onClick={handleOptIn}>\n            Opt-In\n          </Button>\n        </Card.Body>\n      )}\n\n      {props.isPending && (\n        <Card.Body>\n          <Card.Title>Waiting for Acceptance</Card.Title>\n          <Card.Text>\n            Waiting for the creator of the election to accept...\n          </Card.Text>\n          <Card.Text className=\"mt-3\">\n            You can close out or clear state to remove this smart contract from your account\n          </Card.Text>\n          <ButtonGroup>\n            <Button onClick={handleCloseOut} variant=\"info\" type=\"submit\">\n              Close Out\n            </Button>\n            <Button onClick={handleClearState} variant=\"info\" type=\"submit\">\n              Clear State\n            </Button>\n          </ButtonGroup>\n        </Card.Body>\n      )}\n\n      {props.isAccepted && props.isVoted === undefined && (\n        <div>\n          <Card.Body>\n            <Card.Title>Cast Your Vote</Card.Title>\n            <Card.Text>Use the dropdown below to select your vote!</Card.Text>\n            <ButtonGroup>\n              <DropdownButton\n                variant=\"info\"\n                title={`Option ${voteChoice}`}\n                id=\"voteOptions\"\n              >\n                {props.electionChoices.map((choice) => (\n                  <Dropdown.Item\n                    key={choice}\n                    value={choice}\n                    onClick={() => handleVoteSelect(choice)}\n                  >\n                    {choice}\n                  </Dropdown.Item>\n                ))}\n              </DropdownButton>\n\n              <Button variant=\"info\" onClick={handleVoteSubmit}>\n                Vote\n              </Button>\n            </ButtonGroup>\n            <Card.Text className=\"mt-3\">\n              You can close out or clear state to remove this smart contract from your account\n            </Card.Text>\n            <ButtonGroup>\n              <Button onClick={handleCloseOut} variant=\"info\" type=\"submit\">\n                Close Out\n              </Button>\n              <Button onClick={handleClearState} variant=\"info\" type=\"submit\">\n                Clear State\n              </Button>\n            </ButtonGroup>\n          </Card.Body>\n        </div>\n      )}\n\n      {props.isVoted !== undefined && (\n        <Card.Body>\n          <Card.Title>You Voted!</Card.Title>\n          <Card.Text>\n            You have cast your vote for option{\" \"}\n            {props.electionChoices[props.isVoted]}.\n          </Card.Text>\n          <Card.Text className=\"mt-3\">\n            You can close out or clear state to remove this smart contract from your account.\n            { props.latestRound < props.electionState.ElectionEnd ?\n                <div>This will also remove your vote from the election</div> :\n                <div>Your vote will remain in the election's final results</div>\n            }\n          </Card.Text>\n          <ButtonGroup>\n            <Button onClick={handleCloseOut} variant=\"info\" type=\"submit\">\n              Close Out\n            </Button>\n            <Button onClick={handleClearState} variant=\"info\" type=\"submit\">\n              Clear State\n            </Button>\n          </ButtonGroup>\n        </Card.Body>\n      )}\n\n      {props.isRejected && (\n        <Card.Body>\n          <Card.Title>You Have Been Rejected</Card.Title>\n          <Card.Text>\n            The creator of this election has rejected your request to be able to\n            vote in this election.\n          </Card.Text>\n          <Card.Text className=\"mt-3\">\n            You can close out or clear state to remove this smart contract from your account\n          </Card.Text>\n          <ButtonGroup>\n            <Button onClick={handleCloseOut} variant=\"info\" type=\"submit\">\n              Close Out\n            </Button>\n            <Button onClick={handleClearState} variant=\"info\" type=\"submit\">\n              Clear State\n            </Button>\n          </ButtonGroup>\n        </Card.Body>\n      )}\n    </Card>\n  );\n}\n\nexport default VoterCard;\n"]},"metadata":{},"sourceType":"module"}